package tpfilrouge.tp_fil_rouge.controleur.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import tpfilrouge.tp_fil_rouge.modele.entite.AnneeAcademique;
import tpfilrouge.tp_fil_rouge.services.AnneeAcademiqueService;
import tpfilrouge.tp_fil_rouge.services.ApprentiService;

import java.util.List;

/**
 * Contr√¥leur web S√âCURIS√â pour la gestion des ann√©es acad√©miques
 * 
 * SYST√àME S√âCURIS√â - Version 2.0
 * ‚úÖ Autoris√© : Promotion automatique s√©quentielle uniquement
 * ‚ùå Interdit : Choix manuel ann√©e courante, retour arri√®re, saut d'ann√©es
 * 
 * @version 2.0 - S√©curis√©
 */
@Controller
@RequestMapping("/web/annees")
public class WebAnneeAcademiqueController {
    
    private static final Logger logger = LoggerFactory.getLogger(WebAnneeAcademiqueController.class);
    
    private final AnneeAcademiqueService anneeAcademiqueService;
    private final ApprentiService apprentiService;
    
    @Autowired
    public WebAnneeAcademiqueController(AnneeAcademiqueService anneeAcademiqueService,
                                       ApprentiService apprentiService) {
        this.anneeAcademiqueService = anneeAcademiqueService;
        this.apprentiService = apprentiService;
    }
    
    /**
     * Affiche la page de gestion des ann√©es acad√©miques
     */
    @GetMapping
    public String afficherGestionAnnees(Model model) {
        logger.info("Affichage de la page de gestion des ann√©es acad√©miques");
        
        try {
            List<AnneeAcademique> annees = anneeAcademiqueService.getAllAnnees();
            AnneeAcademique anneeCourante = anneeAcademiqueService.getAnneeCourante().orElse(null);
            
            model.addAttribute("annees", annees);
            model.addAttribute("anneeCourante", anneeCourante);
            
            // Calcul de l'ann√©e suivante pour l'interface
            String anneeSuivante = "";
            if (anneeCourante != null) {
                try {
                    String anneeStr = anneeCourante.getAnnee(); // ex: "2024-2025"
                    int premierAnnee = Integer.parseInt(anneeStr.substring(0, 4)); // 2024
                    anneeSuivante = (premierAnnee + 1) + "-" + (premierAnnee + 2); // "2025-2026"
                } catch (Exception e) {
                    logger.warn("Erreur calcul ann√©e suivante pour {}", anneeCourante.getAnnee());
                }
            }
            model.addAttribute("anneeSuivante", anneeSuivante);
            
            // Statistiques des apprentis par programme
            long nombreL1 = apprentiService.compterApprentisByProgramme("L1");
            long nombreL2 = apprentiService.compterApprentisByProgramme("L2");
            long nombreL3 = apprentiService.compterApprentisByProgramme("L3");
            
            model.addAttribute("nombreL1", nombreL1);
            model.addAttribute("nombreL2", nombreL2);
            model.addAttribute("nombreL3", nombreL3);
            
            logger.info("Statistiques charg√©es : L1={}, L2={}, L3={}", 
                       nombreL1, nombreL2, nombreL3);
            
        } catch (Exception e) {
            logger.error("Erreur lors du chargement des ann√©es acad√©miques", e);
            model.addAttribute("erreur", "Erreur lors du chargement des donn√©es");
        }
        
        return "annees/gestion";
    }
    
    /**
     * üéì SEULE M√âTHODE AUTORIS√âE - Promotion Automatique S√©curis√©e
     * 
     * Fonctionnalit√©s :
     * ‚úÖ Validation automatique de la s√©quence (ann√©e N+1 uniquement)
     * ‚úÖ Cr√©ation automatique de la nouvelle ann√©e si n√©cessaire  
     * ‚úÖ Promotion automatique de TOUS les apprentis (L1‚ÜíL2‚ÜíL3‚ÜíDipl√¥m√©s)
     * ‚úÖ D√©finition automatique de la nouvelle ann√©e comme courante
     * ‚ùå Impossible de revenir en arri√®re ou sauter des ann√©es
     */
    @PostMapping("/passer-annee-suivante")
    public String passerAnneeSuivante(@RequestParam String nouvelleAnnee, RedirectAttributes redirectAttributes) {
        
        logger.info("üéì PROMOTION AUTOMATIQUE vers l'ann√©e : {}", nouvelleAnnee);
        
        try {
            // La m√©thode s√©curis√©e valide automatiquement la transition
            anneeAcademiqueService.passerAAnneeSuivante(nouvelleAnnee);
            
            logger.info("‚úÖ Promotion automatique termin√©e avec succ√®s vers {}", nouvelleAnnee);
            redirectAttributes.addFlashAttribute("message", 
                "üéâ Promotion Automatique R√©ussie vers " + nouvelleAnnee + " !\n" +
                "‚úÖ Tous les apprentis ont √©t√© promus (L1‚ÜíL2, L2‚ÜíL3, L3‚ÜíDipl√¥m√©s)\n" +
                "‚úÖ Nouvelle ann√©e d√©finie comme courante");
            
        } catch (RuntimeException e) {
            // Erreurs de validation (transitions non autoris√©es)
            logger.warn("‚ùå Promotion refus√©e : {}", e.getMessage());
            redirectAttributes.addFlashAttribute("erreur", 
                "üö´ " + e.getMessage());
            
        } catch (Exception e) {
            // Erreurs techniques
            logger.error("‚ùå Erreur technique lors de la promotion automatique", e);
            redirectAttributes.addFlashAttribute("erreur", 
                "‚ö†Ô∏è Erreur technique lors de la promotion automatique. Contactez l'administrateur.");
        }
        
        return "redirect:/web/annees";
    }
}